{
	"info": {
		"_postman_id": "550e8400-e29b-41d4-a716-446655440000",
		"name": "Video Analysis Service",
		"description": "Comprehensive API collection for the Video Analysis Service. This collection includes all endpoints for video management, analysis operations, and finder operations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "System",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('status');",
									"    pm.expect(response).to.have.property('service');",
									"    pm.expect(response).to.have.property('version');",
									"    pm.expect(response).to.have.property('time');",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.eql('healthy');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"health"
							]
						},
						"description": "Check the health status of the Video Analysis Service."
					},
					"response": []
				}
			],
			"description": "System-level endpoints for health monitoring and service status."
		},
		{
			"name": "Video Management",
			"item": [
				{
					"name": "Upload Video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('video');",
									"});",
									"",
									"pm.test(\"Upload was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"// Store video ID for subsequent requests",
									"if (pm.response.json().success) {",
									"    pm.environment.set('video_id', pm.response.json().video.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"description": "Video file to upload (supported formats: mp4, avi, mov, mkv, wmv, flv, webm)"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/videos/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"videos",
								"upload"
							]
						},
						"description": "Upload a video file for analysis. Supported formats: mp4, avi, mov, mkv, wmv, flv, webm. Max file size: 100MB."
					},
					"response": []
				},
				{
					"name": "List Videos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('videos');",
									"    pm.expect(response).to.have.property('total');",
									"});",
									"",
									"pm.test(\"List operation was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/videos?limit=10&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"videos"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"description": "Number of videos to return (default: 10, max: 100)"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Number of videos to skip (default: 0)"
								}
							]
						},
						"description": "Get a paginated list of all uploaded videos."
					},
					"response": []
				},
				{
					"name": "Get Video Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('filename');",
									"    pm.expect(response).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/videos/{{video_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"videos",
								"{{video_id}}"
							]
						},
						"description": "Get detailed information about a specific video."
					},
					"response": []
				},
				{
					"name": "Delete Video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Delete was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/videos/{{video_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"videos",
								"{{video_id}}"
							]
						},
						"description": "Delete a video and its associated analysis results."
					},
					"response": []
				},
				{
					"name": "Download Video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is binary\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('video/');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/videos/{{video_id}}/download",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"videos",
								"{{video_id}}",
								"download"
							]
						},
						"description": "Download the original video file."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing video files including upload, listing, retrieval, and deletion."
		},
		{
			"name": "Analysis Operations",
			"item": [
				{
					"name": "Start Analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('job');",
									"});",
									"",
									"pm.test(\"Analysis started successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"// Store analysis job ID for subsequent requests",
									"if (pm.response.json().success) {",
									"    pm.environment.set('analysis_job_id', pm.response.json().job.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/analysis/{{video_id}}/start",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"analysis",
								"{{video_id}}",
								"start"
							]
						},
						"description": "Start analyzing a video for person detection and tracking."
					},
					"response": []
				},
				{
					"name": "Get Analysis Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('job');",
									"});",
									"",
									"pm.test(\"Status retrieved successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/analysis/{{video_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"analysis",
								"{{video_id}}",
								"status"
							]
						},
						"description": "Get the current status of a video analysis job."
					},
					"response": []
				},
				{
					"name": "Get Analysis Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('results');",
									"});",
									"",
									"pm.test(\"Results retrieved successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/analysis/{{video_id}}/results",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"analysis",
								"{{video_id}}",
								"results"
							]
						},
						"description": "Get the results of a completed video analysis."
					},
					"response": []
				},
				{
					"name": "Start Batch Analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Batch analysis started successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  \"{{video_id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/analysis/batch",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"analysis",
								"batch"
							]
						},
						"description": "Start analysis for multiple videos."
					},
					"response": []
				}
			],
			"description": "Endpoints for video analysis operations including starting analysis, checking status, and retrieving results."
		},
		{
			"name": "Finder Operations",
			"item": [
				{
					"name": "Upload Reference Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('filename');",
									"});",
									"",
									"// Store reference image ID for subsequent requests",
									"if (pm.response.json().id) {",
									"    pm.environment.set('reference_image_id', pm.response.json().id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"description": "Reference image file (supported formats: jpg, jpeg, png, bmp, gif, tiff, webp)"
								},
								{
									"key": "description",
									"value": "John Doe",
									"type": "text",
									"description": "Description of the person"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/finder/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"finder",
								"upload"
							]
						},
						"description": "Upload a reference image for person finding. Supported formats: jpg, jpeg, png, bmp, gif, tiff, webp."
					},
					"response": []
				},
				{
					"name": "List Reference Images",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/finder/images",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"finder",
								"images"
							]
						},
						"description": "Get a list of all uploaded reference images."
					},
					"response": []
				},
				{
					"name": "Search for Person",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('search_job');",
									"});",
									"",
									"pm.test(\"Search started successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"// Store search job ID for subsequent requests",
									"if (pm.response.json().success) {",
									"    pm.environment.set('search_job_id', pm.response.json().search_job.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reference_image_id\": \"{{reference_image_id}}\",\n  \"video_ids\": [\"{{video_id}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/finder/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"finder",
								"search"
							]
						},
						"description": "Search for a person in videos using a reference image."
					},
					"response": []
				},
				{
					"name": "Get Search Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/finder/search/{{search_job_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"finder",
								"search",
								"{{search_job_id}}",
								"status"
							]
						},
						"description": "Get the current status of a person search job."
					},
					"response": []
				},
				{
					"name": "Get Search Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('results');",
									"    pm.expect(response).to.have.property('total');",
									"});",
									"",
									"pm.test(\"Results retrieved successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/finder/search/{{search_job_id}}/results",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"finder",
								"search",
								"{{search_job_id}}",
								"results"
							]
						},
						"description": "Get the results of a completed person search."
					},
					"response": []
				},
				{
					"name": "Delete Reference Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    pm.expect(response).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Delete was successful\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/finder/images/{{reference_image_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"finder",
								"images",
								"{{reference_image_id}}"
							]
						},
						"description": "Delete a reference image and its associated search results."
					},
					"response": []
				}
			],
			"description": "Endpoints for person finding operations including uploading reference images, searching for persons, and retrieving results."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set common headers",
					"pm.request.headers.add({",
					"    key: 'Accept',",
					"    value: 'application/json'",
					"});",
					"",
					"// Generate request ID if not present",
					"if (!pm.request.headers.has('X-Request-ID')) {",
					"    pm.request.headers.add({",
					"        key: 'X-Request-ID',",
					"        value: pm.variables.replaceIn('{{$guid}}')",
					"    });",
					"}",
					"",
					"// Add authorization header if token exists (for future use)",
					"if (pm.environment.get('auth_token')) {",
					"    pm.request.headers.add({",
					"        key: 'Authorization',",
					"        value: 'Bearer ' + pm.environment.get('auth_token')",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "api_version",
			"value": "v1",
			"type": "string"
		}
	]
} 